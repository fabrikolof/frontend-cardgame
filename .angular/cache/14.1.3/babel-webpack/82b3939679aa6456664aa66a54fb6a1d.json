{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n/*export interface Tile {\r\n  color: string;\r\n  cols: number;\r\n  rows: number;\r\n  text: string;\r\n}*/\n//TODO: componente para el tablero de juego\n\nlet BoardComponent = class BoardComponent {\n  constructor(api, authService, ws, route) {\n    this.api = api;\n    this.authService = authService;\n    this.ws = ws;\n    this.route = route;\n    /*tiles: Tile[] = [\r\n      {text: 'Número de jugadores, Tiempo de ronda, Botón de iniciar', cols: 3, rows: 1, color: 'lightblue'},\r\n      {text: 'Mazo con cartas', cols: 1, rows: 10, color: 'lightgreen'},\r\n      {text: 'Partida', cols: 3, rows: 9, color: 'lightpink'},\r\n    ];*/\n\n    this.cartasDelJugador = [];\n    this.cartasDelTablero = [];\n    this.tiempo = 0;\n    this.jugadoresRonda = 0;\n    this.jugadoresTablero = 0;\n    this.numeroRonda = 0;\n    this.juegoId = \"\";\n    this.uid = \"\";\n    this.roundStarted = false;\n    this.buttonDisabled = true;\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.juegoId = params['id'];\n      this.uid = this.authService.user.uid;\n      this.api.getMiMazo(this.uid, this.juegoId).subscribe(element => {\n        this.cartasDelJugador = element.cartas;\n      });\n      this.api.getTablero(this.juegoId).subscribe(element => {\n        this.cartasDelTablero = Object.entries(element.tablero.cartas).flatMap(a => {\n          return a[1];\n        });\n        this.tiempo = element.tiempo;\n        this.jugadoresRonda = element.ronda.jugadores.length;\n        this.jugadoresTablero = element.tablero.jugadores.length;\n        this.numeroRonda = element.ronda.numero;\n      });\n      this.ws.connect(this.juegoId);\n      this.ws.subscribe(event => {\n        console.log(event);\n\n        if (event.type === 'cardgame.ponercartaentablero') {\n          this.cartasDelTablero.push({\n            cartaId: event.carta.cartaId.uuid,\n            poder: event.carta.poder,\n            estaOculta: event.carta.estaOculta,\n            estaHabilitada: event.carta.estaHabilitada\n          });\n        }\n\n        if (event.type === 'cardgame.cartaquitadadelmazo') {\n          this.cartasDelJugador = this.cartasDelJugador.filter(item => item.cartaId !== event.carta.cartaId.uuid);\n        }\n\n        if (event.type === 'cardgame.tiempocambiadodeltablero') {\n          this.tiempo = event.tiempo;\n        }\n\n        if (event.type === 'cardgame.rondainiciada') {\n          this.roundStarted = true;\n        }\n\n        if (event.type === 'cardgame.rondaterminada') {\n          this.roundStarted = false; //window.location.reload();\n        }\n\n        if (event.type === 'cardgame.juegofinalizado') {\n          //ALERTA\n          if (confirm(\"El ganador es \" + event.alias)) {\n            window.location.reload();\n          }\n        }\n\n        if (event.type === 'cardgame.cartasasignadasajugador') {}\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.ws.close();\n  }\n\n  poner(cartaId) {\n    this.api.ponerCarta({\n      cartaId: cartaId,\n      juegoId: this.juegoId,\n      jugadorId: this.uid\n    }).subscribe();\n  }\n\n  iniciarRonda() {\n    this.api.iniciarRonda({\n      juegoId: this.juegoId\n    }).subscribe();\n  }\n\n};\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})], BoardComponent);\nexport { BoardComponent };","map":null,"metadata":{},"sourceType":"module"}